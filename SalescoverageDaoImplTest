@Configuration
@EnableWebSecurity
public class SecurityConfig {

    private final AuthorizationService authorizationService;

    public SecurityConfig(AuthorizationService authorizationService) {
        this.authorizationService = authorizationService;
    }

    @Bean
    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
        http
            .authorizeHttpRequests(auth -> auth
                .antMatchers("/api/frontend/downloadFiles").authenticated()
                .anyRequest().permitAll()
            )
            .csrf().disable()

            // ⬇️ Inject custom post-auth filter to check group-based entitlement
            .addFilterAfter(groupAuthorizationFilter(), BasicAuthenticationFilter.class);

        return http.build();
    }

    public Filter groupAuthorizationFilter() {
        return new GroupAuthorizationFilter(authorizationService);
    }
}




package com.ms.datalink.globalDatalink.filter;

import com.ms.datalink.globalDatalink.service.AuthorizationService;
import org.springframework.http.HttpStatus;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;

import javax.servlet.*;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;

public class GroupAuthorizationFilter implements Filter {

    private final AuthorizationService authorizationService;

    public GroupAuthorizationFilter(AuthorizationService authorizationService) {
        this.authorizationService = authorizationService;
    }

    @Override
    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)
            throws IOException, ServletException {

        HttpServletRequest httpRequest = (HttpServletRequest) request;
        String path = httpRequest.getRequestURI();

        // Only apply this filter to /downloadFiles
        if (path.contains("/api/frontend/downloadFiles")) {
            Authentication auth = SecurityContextHolder.getContext().getAuthentication();

            if (auth != null && auth.isAuthenticated()) {
                String user = auth.getName();

                // Remove realm if it's Kerberos (user@REALM)
                if (user.contains("@")) {
                    user = user.split("@")[0];
                }

                if (!authorizationService.isUserEntitled(user)) {
                    HttpServletResponse httpResponse = (HttpServletResponse) response;
                    httpResponse.sendError(HttpStatus.FORBIDDEN.value(), "User not entitled");
                    return;
                }
            } else {
                HttpServletResponse httpResponse = (HttpServletResponse) response;
                httpResponse.sendError(HttpStatus.UNAUTHORIZED.value(), "Unauthorized access");
                return;
            }
        }

        // Continue down the filter chain
        chain.doFilter(request, response);
    }
}
