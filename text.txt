package com.example.immktgtranslations.health;

import ms.exceptions.SCVException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.actuate.health.Health;
import org.springframework.boot.actuate.health.HealthIndicator;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Component;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RestController;

import javax.sql.DataSource;
import java.sql.Connection;
import java.util.HashMap;
import java.util.Map;

@Component
@RestController
public class TranslationsHealthIndicator implements HealthIndicator {

    private static final int DB_TIMEOUT_SECONDS = 2;

    @Autowired
    private DataSource dataSource;

    @Autowired
    private AuthService authService;

    @Override
    public Health health() {
        CheckResult r = runChecks();
        Health.Builder b = (r.allUp()) ? Health.up() : Health.down();
        b.withDetail("Database", r.dbDetail)
         .withDetail("TransPerfect service", r.oauthDetail)
         .withDetail("scv", r.scvDetail);
        return b.build();
    }

    @GetMapping("/health")
    public ResponseEntity<Map<String, Object>> healthEndpoint() {
        CheckResult r = runChecks();

        HttpStatus status;
        if (!r.dbUp || r.scvFailed) {
            status = HttpStatus.INTERNAL_SERVER_ERROR;   // 500
        } else if (!r.oauthUp) {
            status = HttpStatus.SERVICE_UNAVAILABLE;     // 503
        } else {
            status = HttpStatus.OK;                      // 200
        }

        Map<String, Object> body = new HashMap<>();
        body.put("status", r.allUp() ? "UP" : "DOWN");

        Map<String, Object> details = new HashMap<>();
        details.put("Database", r.dbDetail);                 // "Connection is successful" / "Connection failed"
        details.put("TransPerfect service", r.oauthDetail);  // "Service is UP" / "Service is down"
        details.put("scv", r.scvDetail);                     // "access successful" / "access failed"
        body.put("details", details);

        return new ResponseEntity<>(body, status);
    }

    private CheckResult runChecks() {
        CheckResult r = new CheckResult();

        // DB check
        try (Connection conn = dataSource.getConnection()) {
            if (conn != null && conn.isValid(DB_TIMEOUT_SECONDS)) {
                r.dbUp = true;
                r.dbDetail = "Connection is successful";
            } else {
                r.dbUp = false;
                r.dbDetail = "Connection failed";
            }
        } catch (Exception ignored) {
            r.dbUp = false;
            r.dbDetail = "Connection failed";
        }

        // OAuth + SCV check
        try {
            String token = authService.getToken();
            if (token != null && !token.isBlank()) {
                r.oauthUp = true;
                r.oauthDetail = "Service is UP";
                r.scvDetail = "access successful"; // SCV implicitly fine if we got a token
            } else {
                r.oauthUp = false;
                r.oauthDetail = "Service is down";
                if (r.scvDetail == null) r.scvDetail = "access successful";
            }
        } catch (SCVException scv) {
            r.oauthUp = false;
            r.oauthDetail = "Service is down";
            r.scvFailed = true;
            r.scvDetail = "access failed";
        } catch (Exception ignored) {
            r.oauthUp = false;
            r.oauthDetail = "Service is down";
            if (r.scvDetail == null) r.scvDetail = "access successful";
        }

        if (r.scvDetail == null) r.scvDetail = "access successful";
        return r;
    }

    private static class CheckResult {
        boolean dbUp = false;
        boolean oauthUp = false;
        boolean scvFailed = false;

        String dbDetail = "Connection failed";
        String oauthDetail = "Service is down";
        String scvDetail = null;

        boolean allUp() {
            return dbUp && oauthUp && !scvFailed;
        }
    }

    public interface AuthService {
        String getToken();
    }
}
