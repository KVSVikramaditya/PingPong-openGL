// src/main/java/com/example/immktgtranslations/controller/HealthController.java
package com.example.immktgtranslations.controller;

import com.example.immktgtranslations.service.TranslationsHealthIndicator;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.actuate.health.Health;
import org.springframework.boot.actuate.health.Status;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
public class HealthController {

    private final TranslationsHealthIndicator healthIndicator;

    @Autowired
    public HealthController(TranslationsHealthIndicator healthIndicator) {
        this.healthIndicator = healthIndicator;
    }

    @GetMapping("/health")
    public ResponseEntity<Health> getHealth() {
        Health health = healthIndicator.health();
        HttpStatus status = Status.UP.equals(health.getStatus())
                ? HttpStatus.OK
                : HttpStatus.INTERNAL_SERVER_ERROR;
        return ResponseEntity.status(status).body(health);
    }
}



// src/main/java/com/example/immktgtranslations/service/TranslationsHealthIndicator.java
package com.example.immktgtranslations.service;

import ms.exceptions.SCVException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.actuate.health.Health;
import org.springframework.boot.actuate.health.HealthIndicator;
import org.springframework.stereotype.Component;

import javax.sql.DataSource;
import java.sql.Connection;

@Component
public class TranslationsHealthIndicator implements HealthIndicator {

    private static final int DB_TIMEOUT_SECONDS = 2;

    @Autowired
    private DataSource dataSource;

    @Autowired
    private AuthService authService;

    @Override
    public Health health() {
        CheckResult r = runChecks();
        Health.Builder b = r.allUp() ? Health.up() : Health.down();

        return b.withDetail("Database", r.dbDetail)
                .withDetail("TransPerfect service", r.oauthDetail)
                .withDetail("scv", r.scvDetail)
                .build();
    }

    private CheckResult runChecks() {
        CheckResult r = new CheckResult();

        // DB check
        try (Connection conn = dataSource.getConnection()) {
            if (conn != null && conn.isValid(DB_TIMEOUT_SECONDS)) {
                r.dbUp = true;
                r.dbDetail = "Connection is successful";
            } else {
                r.dbUp = false;
                r.dbDetail = "Connection failed";
            }
        } catch (Exception ignored) {
            r.dbUp = false;
            r.dbDetail = "Connection failed";
        }

        // OAuth/TransPerfect + SCV check
        try {
            String token = authService.getToken();
            if (token != null && !token.isBlank()) {
                r.oauthUp = true;
                r.oauthDetail = "Service is UP";
                if (r.scvDetail == null) r.scvDetail = "access successful";
            } else {
                r.oauthUp = false;
                r.oauthDetail = "Service is down";
                if (r.scvDetail == null) r.scvDetail = "access successful";
            }
        } catch (Exception e) {
            r.oauthUp = false;
            r.oauthDetail = "Service is down";
            if (e instanceof SCVException) {
                r.scvFailed = true;
                r.scvDetail = "access failed";
            } else {
                if (r.scvDetail == null) r.scvDetail = "access successful";
            }
        }

        return r;
    }

    private static class CheckResult {
        boolean dbUp = false;
        boolean oauthUp = false;
        boolean scvFailed = false;

        String dbDetail = "Connection failed";
        String oauthDetail = "Service is down";
        String scvDetail = null;

        boolean allUp() { return dbUp && oauthUp && !scvFailed; }
    }
}
